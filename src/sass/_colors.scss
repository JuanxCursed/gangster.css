$shade-prefix-name: 'shade-';
$shade-diff: 10;
$shade-ammount: 9;
$shade-steps: 100;
$blue: #393992;
$red: #b94040;
$colors: ( 'blue':$blue, 'red':$red);
// generate function to manipulate color shade
@function get-shade($color, $shade) {
    @return $color;
}

// generate function to generate multiple shades of the same color
@mixin palette-builder() {
    @each $color-name,
    $color in $colors {
        $pallete: ();
        @for $shade from 1 through $shade-ammount {
            $pallete: map-merge( $pallete, ('#{$shade*$shade-steps}': get-shade($color, $shade*$shade-steps)));
        }
        @each $shade, $color in $pallete {
            @warn "test porra";
            @if $shade == 500 {
                [#{$color-name}] {
                    background-color: $color;
                }
            }
            [#{$color-name}][#{$shade-prefix-name}#{$shade}] {
                background-color: $color;
            }
        }
    }
}

// generate a array with multiple colors to generate multiple colors shades
@include palette-builder();
// create a default theme based on the auto generated colors.