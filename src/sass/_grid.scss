div,
main,
aside,
article,
header,
footer {
  &[#{$grid-prop-name}] {
    display: flex;
  }
}

[nowrap] {
  flex-wrap: nowrap;
}

[wrap] {
  flex-wrap: wrap;
}

[wrap-reverse] {
  flex-wrap: wrap-reverse;
}

[row] {
  display: flex;
  flex-direction: row;
  box-sizing: border-box;
  margin-right: -$grid-column-gap / 2;
  margin-left: -$grid-column-gap / 2;
  flex: 0 1 auto;
  flex-wrap: wrap;

  @include clearfix;

  &[nowrap] {
    flex-wrap: nowrap;
  }

  &[justify-start] {
    justify-content: flex-start;
  }

  &[justify-end] {
    justify-content: flex-end;
  }

  &[justify-center] {
    justify-content: center;
  }

  &[justify-between] {
    justify-content: space-between;
  }

  &[justify-around] {
    justify-content: space-around;
  }

  &[reverse] {
    flex-direction: row-reverse;
  }

  &[align-top] {
    align-items: flex-start;
  }

  &[align-bottom] {
    align-items: flex-end;
  }

  &[align-middle] {
    align-items: center;
  }

  &[align-baseline] {
    align-items: baseline;
  }

  &[align-stretch] {
    align-items: stretch;
  }

  [flex-item] {
    flex: 0 0 auto;

    &[grow] {
      flex-grow: 1;
    }
  }
}

[fluid] {
  margin: 0;
  max-width: 100%;
}

[direction-column] {
  flex-direction: column;
}

[direction-row] {
  flex-direction: row;
}

[hide] {
  display: none;
  visibility: hidden;
}

[show] {
  display: inline-block;
  visibility: visible;
}

[#{$width-prop-name}^=""],
[#{$width-prop-name}*=""] {
  position: relative;
  box-sizing: border-box;
  width: 100%;
  min-height: 1px;
  padding-right: $grid-column-gap / 2;
  padding-left: $grid-column-gap / 2;
  flex: 0 0 auto;
}


@each $prop-name, $prop in $map-props {
  @for $i from 0 through $helper-amount {
    [#{$prop-name}#{$i}] {
      #{$prop}: $i * $helper-step * 1px;
    }
    @each $side-prop, $side in $map-props-sides {
      [#{$prop-name}#{$side-prop}#{$i}] {
        #{$prop}-#{$side}: $i * $helper-step * 1px;
      }
      @if $i == 0 {
        [#{$side}] {
          #{$side}: 0;
        }
      }
    }
  }
}

@each $bp, $breakpoint in $map-grid-bp {
  @include grid-builder($bp, $breakpoint, $grid-column-count);
}

@each $bp, $breakpoint in $map-grid-bp {
  $index: index(($map-grid-bp), ($bp $breakpoint)) - 1;
  @if ($bp == "") {
    $bp: $grid-bp-xs-prop-name;
    [#{$boxed-prop-name}] {
      box-sizing: border-box;
      margin-right: auto;
      margin-left: auto;
      padding-right: $grid-column-gap;
      padding-left: $grid-column-gap;
      max-width: $boxed-size - $boxed-step * $index * 1%;
      width: 100%;
      @include clearfix;
    }
    [#{$hidden-prop-name}#{$bp}#{$up-prop-name}] {
      display: none !important;
    }
    [#{$hidden-prop-name}#{$bp}#{$down-prop-name}] {
      display: none !important;
    }
  } @else {
    @include media-builder($breakpoint) {
      [#{$hidden-prop-name}#{$bp}#{$up-prop-name}] {
        display: none !important;
      }
    }
    @include media-builder($breakpoint - 1, "max") {
      [#{$hidden-prop-name}#{$bp}#{$down-prop-name}] {
        display: none !important;
      }
      [#{$boxed-prop-name}#{$bp}#{$down-prop-name}] {
        max-width: $boxed-size - $boxed-step * $index * 1%;
      }
    }
  }
}
//max-width: percentage($i / $columns);
//flex: 0 0 percentage($i / $columns);
