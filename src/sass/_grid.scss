[hide] {
  display: none;
  visibility: hidden;
}

[show] {
  display: inline-block;
  visibility: visible;
}

div,
main,
aside,
article,
header,
footer {
  &[#{$grid-prop-name}] {
    display: flex;
    flex-wrap: wrap;

    & > * {
      position: relative;
      box-sizing: border-box;
      width: 100%;
      min-height: 1px;
      padding-right: $grid-column-gap / 2 * 1px;
      padding-left: $grid-column-gap / 2 * 1px;
      flex: 0 0 auto;
    }
  }
}


[flex] {
  display: flex;
}

[nowrap] {
  flex-wrap: nowrap;
}

[wrap] {
  flex-wrap: wrap;
}

[wrap-reverse] {
  flex-wrap: wrap-reverse;
}

[row] {
  display: flex;
  flex-direction: row;
  box-sizing: border-box;
  margin-right: -$grid-column-gap / 2 * 1px;
  margin-left: -$grid-column-gap / 2 * 1px;
  flex: 0 1 auto;
  flex-wrap: wrap;

  @include clearfix;

  &[nowrap] {
    flex-wrap: nowrap;
  }

  &[#{$reverse-prop-name}] {
    flex-direction: row-reverse;
  }


  @each $type, $value in $map-grid-types-values {
    @if $value != 'baseline' {
      &[#{$justify-prop-name}#{$type}] {
        justify-content: #{$value};
      }
    }
  }

  &[#{$justify-prop-name}between] {
    justify-content: space-between;
  }

  &[#{$justify-prop-name}around] {
    justify-content: space-around;
  }

  @each $type, $value in $map-grid-types-values {
    &[#{$align-items-prop-name}#{$type}] {
      align-items: #{$value};
    }
  }
  @each $type, $value in $map-grid-types-values {
    &[#{$align-content-prop-name}#{$type}] {
      align-content: #{$value};
    }
  }


  @each $type, $value in $map-grid-types-values {
    [#{$align-self-prop-name}#{$type}] {
      align-self: #{$value};
    }
  }

  @each $type, $value in $map-grid-types-values {
    [#{$place-content-prop-name}#{$type}] {
      place-content: #{$value};
    }
  }

  [#{$flex-item-prop-name}] {
    flex: 0 0 auto;

    &[#{$grow-prop-name}] {
      flex-grow: 1;
    }
  }
}

[fluid] {
  margin: 0;
  max-width: 100%;
}

[direction-column] {
  flex-direction: column;
}

[direction-row] {
  flex-direction: row;
}

[#{$width-prop-name}^=''],
[#{$width-prop-name}*=''] {
  position: relative;
  box-sizing: border-box;
  width: 100%;
  min-height: 1px;
  padding-right: $grid-column-gap / 2 * 1px;
  padding-left: $grid-column-gap / 2  * 1px;
  flex: 0 0 auto;
}

@for $i from 0 through $helper-amount {
  [#{$order-prop-name}#{$i}] {
    order: $i;
  }
}

@each $prop-name, $prop in $map-props {
  @for $i from 0 through $helper-amount {
    [#{$prop-name}#{$i}] {
      #{$prop}: $i * $helper-step * 1px;
    }

    @each $side-prop, $side in $map-props-sides {
      [#{$prop-name}#{$side-prop}#{$i}] {
        #{$prop}-#{$side}: $i * $helper-step * 1px;
      }
      @if $i == 0 {
        [#{$side}] {
          #{$side}: 0;
        }
      }
    }
  }
}

@each $bp, $breakpoint in $map-grid-bp {
  @include grid-builder($bp, $breakpoint, $grid-column-count);
}

@each $bp, $breakpoint in $map-grid-bp {
  $index: index(($map-grid-bp), ($bp $breakpoint)) - 1;
  @if ($bp == "") {
    $bp: $grid-bp-xs-prop-name;
    [#{$boxed-prop-name}] {
      box-sizing: border-box;
      margin-right: auto;
      margin-left: auto;
      padding-right: $grid-column-gap * 1px;
      padding-left: $grid-column-gap * 1px;
      max-width: $boxed-size - $boxed-step * $index * 1%;
      width: 100%;
      @include clearfix;
    }
  } @else {
    @include media-builder($breakpoint) {
      [#{$hidden-prop-name}#{$bp}#{$up-prop-name}] {
        display: none !important;
      }
    }
    @include media-builder($breakpoint - 1, "max") {
      [#{$hidden-prop-name}#{$bp}#{$down-prop-name}] {
        display: none !important;
      }
      [#{$boxed-prop-name}#{$bp}#{$down-prop-name}] {
        //max-width: $boxed-size - $boxed-step * $index * 1%;
        max-width: percentage($boxed-size - $boxed-step * $index);
        flex: 0 0 percentage($boxed-size - $boxed-step * $index);
      }
    }
  }
}

//max-width: percentage($i / $columns);
//flex: 0 0 percentage($i / $columns);
